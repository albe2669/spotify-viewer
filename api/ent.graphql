directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Album implements Node {
  id: ID!
  """
  The type of the album
  """
  albumType: AlbumAlbumType!
  """
  The number of tracks in the album
  """
  totalTracks: Int!
  """
  Known external URLs for this artist
  """
  externalUrls: StringMap!
  """
  A link to the Web API endpoint providing full details of the album
  """
  href: String!
  """
  The name of the album
  """
  name: String!
  """
  The date the album was first released
  """
  releaseDate: String!
  """
  The precision with which release_date value is known
  """
  releaseDatePrecision: AlbumReleaseDatePrecision!
  """
  The Spotify URI for the album
  """
  uri: String!
  """
  A list of the genres the album is associated with
  """
  genres: [String!]!
  images: [Image!]!
  artists: [Artist!]
  tracks: [Track!]
}
"""
AlbumAlbumType is enum for the field album_type
"""
enum AlbumAlbumType @goModel(model: "github.com/rustic-beans/spotify-viewer/ent/album.AlbumType") {
  album
  single
  compilation
}
"""
AlbumReleaseDatePrecision is enum for the field release_date_precision
"""
enum AlbumReleaseDatePrecision @goModel(model: "github.com/rustic-beans/spotify-viewer/ent/album.ReleaseDatePrecision") {
  year
  month
  day
}
type Artist implements Node {
  """
  The Spotify ID for the artist
  """
  id: ID!
  """
  Known external URLs for this artist
  """
  externalUrls: StringMap!
  """
  A link to the Web API endpoint providing full details of the artist
  """
  href: String!
  """
  The name of the artist
  """
  name: String!
  """
  The Spotify URI for the artist
  """
  uri: String!
  """
  A list of genres the artist is associated with.  For example, "Prog Rock" or "Post-Grunge".  If not yet classified, the slice is empty.
  """
  genres: [String!]!
  albums: [Album!]
  tracks: [Track!]
  images: [Image!]!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Image implements Node {
  id: ID!
  url: String!
  width: Int!
  height: Int!
  albums: [Album!]
  artists: [Artist!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/rustic-beans/spotify-viewer/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  albums: [Album!]!
  artists: [Artist!]!
  images: [Image!]!
  tracks: [Track!]!
}
type Track implements Node {
  """
  The Spotify ID for the track
  """
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """
  The album on which the track appears
  """
  albumID: ID!
  """
  The disc number
  """
  discNumber: Int
  """
  The track length in milliseconds
  """
  durationMs: Int!
  """
  Whether or not the track has explicit lyrics
  """
  explicit: Boolean!
  """
  Known external URLs for this track
  """
  externalUrls: StringMap!
  """
  A link to the Web API endpoint providing full details of the track
  """
  href: String!
  """
  The name of the track
  """
  name: String!
  """
  The popularity of the track
  """
  popularity: Int!
  """
  A link to a 30 second preview of the track
  """
  previewURL: String
  """
  The number of the track
  """
  trackNumber: Int!
  """
  The Spotify URI for the track
  """
  uri: String!
  artists: [Artist!]!
  album: Album!
}
