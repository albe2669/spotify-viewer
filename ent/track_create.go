// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rustic-beans/spotify-viewer/ent/album"
	"github.com/rustic-beans/spotify-viewer/ent/artist"
	"github.com/rustic-beans/spotify-viewer/ent/schema"
	"github.com/rustic-beans/spotify-viewer/ent/track"
)

// TrackCreate is the builder for creating a Track entity.
type TrackCreate struct {
	config
	mutation *TrackMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tc *TrackCreate) SetCreatedAt(t time.Time) *TrackCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TrackCreate) SetNillableCreatedAt(t *time.Time) *TrackCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TrackCreate) SetUpdatedAt(t time.Time) *TrackCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TrackCreate) SetNillableUpdatedAt(t *time.Time) *TrackCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetAlbumID sets the "album_id" field.
func (tc *TrackCreate) SetAlbumID(s string) *TrackCreate {
	tc.mutation.SetAlbumID(s)
	return tc
}

// SetAvailableMarkets sets the "available_markets" field.
func (tc *TrackCreate) SetAvailableMarkets(s []string) *TrackCreate {
	tc.mutation.SetAvailableMarkets(s)
	return tc
}

// SetDiscNumber sets the "disc_number" field.
func (tc *TrackCreate) SetDiscNumber(i int) *TrackCreate {
	tc.mutation.SetDiscNumber(i)
	return tc
}

// SetNillableDiscNumber sets the "disc_number" field if the given value is not nil.
func (tc *TrackCreate) SetNillableDiscNumber(i *int) *TrackCreate {
	if i != nil {
		tc.SetDiscNumber(*i)
	}
	return tc
}

// SetDurationMs sets the "duration_ms" field.
func (tc *TrackCreate) SetDurationMs(i int) *TrackCreate {
	tc.mutation.SetDurationMs(i)
	return tc
}

// SetExplicit sets the "explicit" field.
func (tc *TrackCreate) SetExplicit(b bool) *TrackCreate {
	tc.mutation.SetExplicit(b)
	return tc
}

// SetNillableExplicit sets the "explicit" field if the given value is not nil.
func (tc *TrackCreate) SetNillableExplicit(b *bool) *TrackCreate {
	if b != nil {
		tc.SetExplicit(*b)
	}
	return tc
}

// SetExternalUrls sets the "external_urls" field.
func (tc *TrackCreate) SetExternalUrls(sm *schema.StringMap) *TrackCreate {
	tc.mutation.SetExternalUrls(sm)
	return tc
}

// SetHref sets the "href" field.
func (tc *TrackCreate) SetHref(s string) *TrackCreate {
	tc.mutation.SetHref(s)
	return tc
}

// SetIsPlayable sets the "is_playable" field.
func (tc *TrackCreate) SetIsPlayable(b bool) *TrackCreate {
	tc.mutation.SetIsPlayable(b)
	return tc
}

// SetName sets the "name" field.
func (tc *TrackCreate) SetName(s string) *TrackCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetPopularity sets the "popularity" field.
func (tc *TrackCreate) SetPopularity(i int) *TrackCreate {
	tc.mutation.SetPopularity(i)
	return tc
}

// SetPreviewURL sets the "preview_url" field.
func (tc *TrackCreate) SetPreviewURL(s string) *TrackCreate {
	tc.mutation.SetPreviewURL(s)
	return tc
}

// SetNillablePreviewURL sets the "preview_url" field if the given value is not nil.
func (tc *TrackCreate) SetNillablePreviewURL(s *string) *TrackCreate {
	if s != nil {
		tc.SetPreviewURL(*s)
	}
	return tc
}

// SetTrackNumber sets the "track_number" field.
func (tc *TrackCreate) SetTrackNumber(i int) *TrackCreate {
	tc.mutation.SetTrackNumber(i)
	return tc
}

// SetURI sets the "uri" field.
func (tc *TrackCreate) SetURI(s string) *TrackCreate {
	tc.mutation.SetURI(s)
	return tc
}

// SetID sets the "id" field.
func (tc *TrackCreate) SetID(s string) *TrackCreate {
	tc.mutation.SetID(s)
	return tc
}

// AddArtistIDs adds the "artists" edge to the Artist entity by IDs.
func (tc *TrackCreate) AddArtistIDs(ids ...string) *TrackCreate {
	tc.mutation.AddArtistIDs(ids...)
	return tc
}

// AddArtists adds the "artists" edges to the Artist entity.
func (tc *TrackCreate) AddArtists(a ...*Artist) *TrackCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tc.AddArtistIDs(ids...)
}

// SetAlbum sets the "album" edge to the Album entity.
func (tc *TrackCreate) SetAlbum(a *Album) *TrackCreate {
	return tc.SetAlbumID(a.ID)
}

// Mutation returns the TrackMutation object of the builder.
func (tc *TrackCreate) Mutation() *TrackMutation {
	return tc.mutation
}

// Save creates the Track in the database.
func (tc *TrackCreate) Save(ctx context.Context) (*Track, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TrackCreate) SaveX(ctx context.Context) *Track {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TrackCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TrackCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TrackCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := track.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := track.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.Explicit(); !ok {
		v := track.DefaultExplicit
		tc.mutation.SetExplicit(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TrackCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Track.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Track.updated_at"`)}
	}
	if _, ok := tc.mutation.AlbumID(); !ok {
		return &ValidationError{Name: "album_id", err: errors.New(`ent: missing required field "Track.album_id"`)}
	}
	if v, ok := tc.mutation.AlbumID(); ok {
		if err := track.AlbumIDValidator(v); err != nil {
			return &ValidationError{Name: "album_id", err: fmt.Errorf(`ent: validator failed for field "Track.album_id": %w`, err)}
		}
	}
	if _, ok := tc.mutation.AvailableMarkets(); !ok {
		return &ValidationError{Name: "available_markets", err: errors.New(`ent: missing required field "Track.available_markets"`)}
	}
	if _, ok := tc.mutation.DurationMs(); !ok {
		return &ValidationError{Name: "duration_ms", err: errors.New(`ent: missing required field "Track.duration_ms"`)}
	}
	if v, ok := tc.mutation.DurationMs(); ok {
		if err := track.DurationMsValidator(v); err != nil {
			return &ValidationError{Name: "duration_ms", err: fmt.Errorf(`ent: validator failed for field "Track.duration_ms": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Explicit(); !ok {
		return &ValidationError{Name: "explicit", err: errors.New(`ent: missing required field "Track.explicit"`)}
	}
	if _, ok := tc.mutation.ExternalUrls(); !ok {
		return &ValidationError{Name: "external_urls", err: errors.New(`ent: missing required field "Track.external_urls"`)}
	}
	if _, ok := tc.mutation.Href(); !ok {
		return &ValidationError{Name: "href", err: errors.New(`ent: missing required field "Track.href"`)}
	}
	if v, ok := tc.mutation.Href(); ok {
		if err := track.HrefValidator(v); err != nil {
			return &ValidationError{Name: "href", err: fmt.Errorf(`ent: validator failed for field "Track.href": %w`, err)}
		}
	}
	if _, ok := tc.mutation.IsPlayable(); !ok {
		return &ValidationError{Name: "is_playable", err: errors.New(`ent: missing required field "Track.is_playable"`)}
	}
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Track.name"`)}
	}
	if v, ok := tc.mutation.Name(); ok {
		if err := track.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Track.name": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Popularity(); !ok {
		return &ValidationError{Name: "popularity", err: errors.New(`ent: missing required field "Track.popularity"`)}
	}
	if _, ok := tc.mutation.TrackNumber(); !ok {
		return &ValidationError{Name: "track_number", err: errors.New(`ent: missing required field "Track.track_number"`)}
	}
	if _, ok := tc.mutation.URI(); !ok {
		return &ValidationError{Name: "uri", err: errors.New(`ent: missing required field "Track.uri"`)}
	}
	if v, ok := tc.mutation.URI(); ok {
		if err := track.URIValidator(v); err != nil {
			return &ValidationError{Name: "uri", err: fmt.Errorf(`ent: validator failed for field "Track.uri": %w`, err)}
		}
	}
	if v, ok := tc.mutation.ID(); ok {
		if err := track.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Track.id": %w`, err)}
		}
	}
	if len(tc.mutation.ArtistsIDs()) == 0 {
		return &ValidationError{Name: "artists", err: errors.New(`ent: missing required edge "Track.artists"`)}
	}
	if len(tc.mutation.AlbumIDs()) == 0 {
		return &ValidationError{Name: "album", err: errors.New(`ent: missing required edge "Track.album"`)}
	}
	return nil
}

func (tc *TrackCreate) sqlSave(ctx context.Context) (*Track, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Track.ID type: %T", _spec.ID.Value)
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TrackCreate) createSpec() (*Track, *sqlgraph.CreateSpec) {
	var (
		_node = &Track{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(track.Table, sqlgraph.NewFieldSpec(track.FieldID, field.TypeString))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(track.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(track.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.AvailableMarkets(); ok {
		_spec.SetField(track.FieldAvailableMarkets, field.TypeJSON, value)
		_node.AvailableMarkets = value
	}
	if value, ok := tc.mutation.DiscNumber(); ok {
		_spec.SetField(track.FieldDiscNumber, field.TypeInt, value)
		_node.DiscNumber = value
	}
	if value, ok := tc.mutation.DurationMs(); ok {
		_spec.SetField(track.FieldDurationMs, field.TypeInt, value)
		_node.DurationMs = value
	}
	if value, ok := tc.mutation.Explicit(); ok {
		_spec.SetField(track.FieldExplicit, field.TypeBool, value)
		_node.Explicit = value
	}
	if value, ok := tc.mutation.ExternalUrls(); ok {
		_spec.SetField(track.FieldExternalUrls, field.TypeJSON, value)
		_node.ExternalUrls = value
	}
	if value, ok := tc.mutation.Href(); ok {
		_spec.SetField(track.FieldHref, field.TypeString, value)
		_node.Href = value
	}
	if value, ok := tc.mutation.IsPlayable(); ok {
		_spec.SetField(track.FieldIsPlayable, field.TypeBool, value)
		_node.IsPlayable = value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(track.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.Popularity(); ok {
		_spec.SetField(track.FieldPopularity, field.TypeInt, value)
		_node.Popularity = value
	}
	if value, ok := tc.mutation.PreviewURL(); ok {
		_spec.SetField(track.FieldPreviewURL, field.TypeString, value)
		_node.PreviewURL = value
	}
	if value, ok := tc.mutation.TrackNumber(); ok {
		_spec.SetField(track.FieldTrackNumber, field.TypeInt, value)
		_node.TrackNumber = value
	}
	if value, ok := tc.mutation.URI(); ok {
		_spec.SetField(track.FieldURI, field.TypeString, value)
		_node.URI = value
	}
	if nodes := tc.mutation.ArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   track.ArtistsTable,
			Columns: track.ArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.AlbumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   track.AlbumTable,
			Columns: []string{track.AlbumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AlbumID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TrackCreateBulk is the builder for creating many Track entities in bulk.
type TrackCreateBulk struct {
	config
	err      error
	builders []*TrackCreate
}

// Save creates the Track entities in the database.
func (tcb *TrackCreateBulk) Save(ctx context.Context) ([]*Track, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Track, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TrackCreateBulk) SaveX(ctx context.Context) []*Track {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TrackCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TrackCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
