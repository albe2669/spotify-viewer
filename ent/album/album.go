// Code generated by ent, DO NOT EDIT.

package album

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the album type in the database.
	Label = "album"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAlbumType holds the string denoting the album_type field in the database.
	FieldAlbumType = "album_type"
	// FieldTotalTracks holds the string denoting the total_tracks field in the database.
	FieldTotalTracks = "total_tracks"
	// FieldAvailableMarkets holds the string denoting the available_markets field in the database.
	FieldAvailableMarkets = "available_markets"
	// FieldExternalUrls holds the string denoting the external_urls field in the database.
	FieldExternalUrls = "external_urls"
	// FieldHref holds the string denoting the href field in the database.
	FieldHref = "href"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldReleaseDate holds the string denoting the release_date field in the database.
	FieldReleaseDate = "release_date"
	// FieldReleaseDatePrecision holds the string denoting the release_date_precision field in the database.
	FieldReleaseDatePrecision = "release_date_precision"
	// FieldRestrictions holds the string denoting the restrictions field in the database.
	FieldRestrictions = "restrictions"
	// FieldURI holds the string denoting the uri field in the database.
	FieldURI = "uri"
	// FieldGenres holds the string denoting the genres field in the database.
	FieldGenres = "genres"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldPopularity holds the string denoting the popularity field in the database.
	FieldPopularity = "popularity"
	// EdgeImages holds the string denoting the images edge name in mutations.
	EdgeImages = "images"
	// EdgeArtists holds the string denoting the artists edge name in mutations.
	EdgeArtists = "artists"
	// EdgeTracks holds the string denoting the tracks edge name in mutations.
	EdgeTracks = "tracks"
	// Table holds the table name of the album in the database.
	Table = "albums"
	// ImagesTable is the table that holds the images relation/edge. The primary key declared below.
	ImagesTable = "album_images"
	// ImagesInverseTable is the table name for the Image entity.
	// It exists in this package in order to avoid circular dependency with the "image" package.
	ImagesInverseTable = "images"
	// ArtistsTable is the table that holds the artists relation/edge. The primary key declared below.
	ArtistsTable = "artist_albums"
	// ArtistsInverseTable is the table name for the Artist entity.
	// It exists in this package in order to avoid circular dependency with the "artist" package.
	ArtistsInverseTable = "artists"
	// TracksTable is the table that holds the tracks relation/edge.
	TracksTable = "tracks"
	// TracksInverseTable is the table name for the Track entity.
	// It exists in this package in order to avoid circular dependency with the "track" package.
	TracksInverseTable = "tracks"
	// TracksColumn is the table column denoting the tracks relation/edge.
	TracksColumn = "album_id"
)

// Columns holds all SQL columns for album fields.
var Columns = []string{
	FieldID,
	FieldAlbumType,
	FieldTotalTracks,
	FieldAvailableMarkets,
	FieldExternalUrls,
	FieldHref,
	FieldName,
	FieldReleaseDate,
	FieldReleaseDatePrecision,
	FieldRestrictions,
	FieldURI,
	FieldGenres,
	FieldLabel,
	FieldPopularity,
}

var (
	// ImagesPrimaryKey and ImagesColumn2 are the table columns denoting the
	// primary key for the images relation (M2M).
	ImagesPrimaryKey = []string{"album_id", "image_id"}
	// ArtistsPrimaryKey and ArtistsColumn2 are the table columns denoting the
	// primary key for the artists relation (M2M).
	ArtistsPrimaryKey = []string{"artist_id", "album_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// HrefValidator is a validator for the "href" field. It is called by the builders before save.
	HrefValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// ReleaseDateValidator is a validator for the "release_date" field. It is called by the builders before save.
	ReleaseDateValidator func(string) error
	// URIValidator is a validator for the "uri" field. It is called by the builders before save.
	URIValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// AlbumType defines the type for the "album_type" enum field.
type AlbumType string

// AlbumType values.
const (
	AlbumTypeAlbum       AlbumType = "album"
	AlbumTypeSingle      AlbumType = "single"
	AlbumTypeCompilation AlbumType = "compilation"
)

func (at AlbumType) String() string {
	return string(at)
}

// AlbumTypeValidator is a validator for the "album_type" field enum values. It is called by the builders before save.
func AlbumTypeValidator(at AlbumType) error {
	switch at {
	case AlbumTypeAlbum, AlbumTypeSingle, AlbumTypeCompilation:
		return nil
	default:
		return fmt.Errorf("album: invalid enum value for album_type field: %q", at)
	}
}

// ReleaseDatePrecision defines the type for the "release_date_precision" enum field.
type ReleaseDatePrecision string

// ReleaseDatePrecision values.
const (
	ReleaseDatePrecisionYear  ReleaseDatePrecision = "year"
	ReleaseDatePrecisionMonth ReleaseDatePrecision = "month"
	ReleaseDatePrecisionDay   ReleaseDatePrecision = "day"
)

func (rdp ReleaseDatePrecision) String() string {
	return string(rdp)
}

// ReleaseDatePrecisionValidator is a validator for the "release_date_precision" field enum values. It is called by the builders before save.
func ReleaseDatePrecisionValidator(rdp ReleaseDatePrecision) error {
	switch rdp {
	case ReleaseDatePrecisionYear, ReleaseDatePrecisionMonth, ReleaseDatePrecisionDay:
		return nil
	default:
		return fmt.Errorf("album: invalid enum value for release_date_precision field: %q", rdp)
	}
}

// OrderOption defines the ordering options for the Album queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAlbumType orders the results by the album_type field.
func ByAlbumType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlbumType, opts...).ToFunc()
}

// ByTotalTracks orders the results by the total_tracks field.
func ByTotalTracks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalTracks, opts...).ToFunc()
}

// ByHref orders the results by the href field.
func ByHref(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHref, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByReleaseDate orders the results by the release_date field.
func ByReleaseDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReleaseDate, opts...).ToFunc()
}

// ByReleaseDatePrecision orders the results by the release_date_precision field.
func ByReleaseDatePrecision(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReleaseDatePrecision, opts...).ToFunc()
}

// ByRestrictions orders the results by the restrictions field.
func ByRestrictions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRestrictions, opts...).ToFunc()
}

// ByURI orders the results by the uri field.
func ByURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURI, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByPopularity orders the results by the popularity field.
func ByPopularity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPopularity, opts...).ToFunc()
}

// ByImagesCount orders the results by images count.
func ByImagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newImagesStep(), opts...)
	}
}

// ByImages orders the results by images terms.
func ByImages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByArtistsCount orders the results by artists count.
func ByArtistsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newArtistsStep(), opts...)
	}
}

// ByArtists orders the results by artists terms.
func ByArtists(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArtistsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTracksCount orders the results by tracks count.
func ByTracksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTracksStep(), opts...)
	}
}

// ByTracks orders the results by tracks terms.
func ByTracks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTracksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newImagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ImagesTable, ImagesPrimaryKey...),
	)
}
func newArtistsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArtistsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ArtistsTable, ArtistsPrimaryKey...),
	)
}
func newTracksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TracksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TracksTable, TracksColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e AlbumType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *AlbumType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = AlbumType(str)
	if err := AlbumTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid AlbumType", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e ReleaseDatePrecision) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *ReleaseDatePrecision) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = ReleaseDatePrecision(str)
	if err := ReleaseDatePrecisionValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid ReleaseDatePrecision", str)
	}
	return nil
}
