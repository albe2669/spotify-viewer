// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rustic-beans/spotify-viewer/ent/album"
	"github.com/rustic-beans/spotify-viewer/ent/schema"
	"github.com/rustic-beans/spotify-viewer/ent/track"
)

// Track is the model entity for the Track schema.
type Track struct {
	config `json:"-"`
	// ID of the ent.
	// The Spotify ID for the track
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// The album on which the track appears
	AlbumID string `json:"album_id,omitempty"`
	// A list of the countries in which the track can be played
	AvailableMarkets []string `json:"available_markets,omitempty"`
	// The disc number
	DiscNumber int `json:"disc_number,omitempty"`
	// The track length in milliseconds
	DurationMs int `json:"duration_ms,omitempty"`
	// Whether or not the track has explicit lyrics
	Explicit bool `json:"explicit,omitempty"`
	// Known external URLs for this track
	ExternalUrls *schema.StringMap `json:"external_urls,omitempty"`
	// A link to the Web API endpoint providing full details of the track
	Href string `json:"href,omitempty"`
	// If true, the track is playable in the given market
	IsPlayable bool `json:"is_playable,omitempty"`
	// The name of the track
	Name string `json:"name,omitempty"`
	// The popularity of the track
	Popularity int `json:"popularity,omitempty"`
	// A link to a 30 second preview of the track
	PreviewURL string `json:"preview_url,omitempty"`
	// The number of the track
	TrackNumber int `json:"track_number,omitempty"`
	// The Spotify URI for the track
	URI string `json:"uri,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrackQuery when eager-loading is set.
	Edges        TrackEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TrackEdges holds the relations/edges for other nodes in the graph.
type TrackEdges struct {
	// Artists holds the value of the artists edge.
	Artists []*Artist `json:"artists,omitempty"`
	// Album holds the value of the album edge.
	Album *Album `json:"album,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedArtists map[string][]*Artist
}

// ArtistsOrErr returns the Artists value or an error if the edge
// was not loaded in eager-loading.
func (e TrackEdges) ArtistsOrErr() ([]*Artist, error) {
	if e.loadedTypes[0] {
		return e.Artists, nil
	}
	return nil, &NotLoadedError{edge: "artists"}
}

// AlbumOrErr returns the Album value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrackEdges) AlbumOrErr() (*Album, error) {
	if e.Album != nil {
		return e.Album, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: album.Label}
	}
	return nil, &NotLoadedError{edge: "album"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Track) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case track.FieldAvailableMarkets, track.FieldExternalUrls:
			values[i] = new([]byte)
		case track.FieldExplicit, track.FieldIsPlayable:
			values[i] = new(sql.NullBool)
		case track.FieldDiscNumber, track.FieldDurationMs, track.FieldPopularity, track.FieldTrackNumber:
			values[i] = new(sql.NullInt64)
		case track.FieldID, track.FieldAlbumID, track.FieldHref, track.FieldName, track.FieldPreviewURL, track.FieldURI:
			values[i] = new(sql.NullString)
		case track.FieldCreatedAt, track.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Track fields.
func (t *Track) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case track.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				t.ID = value.String
			}
		case track.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case track.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case track.FieldAlbumID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field album_id", values[i])
			} else if value.Valid {
				t.AlbumID = value.String
			}
		case track.FieldAvailableMarkets:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field available_markets", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.AvailableMarkets); err != nil {
					return fmt.Errorf("unmarshal field available_markets: %w", err)
				}
			}
		case track.FieldDiscNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field disc_number", values[i])
			} else if value.Valid {
				t.DiscNumber = int(value.Int64)
			}
		case track.FieldDurationMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_ms", values[i])
			} else if value.Valid {
				t.DurationMs = int(value.Int64)
			}
		case track.FieldExplicit:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field explicit", values[i])
			} else if value.Valid {
				t.Explicit = value.Bool
			}
		case track.FieldExternalUrls:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field external_urls", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.ExternalUrls); err != nil {
					return fmt.Errorf("unmarshal field external_urls: %w", err)
				}
			}
		case track.FieldHref:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field href", values[i])
			} else if value.Valid {
				t.Href = value.String
			}
		case track.FieldIsPlayable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_playable", values[i])
			} else if value.Valid {
				t.IsPlayable = value.Bool
			}
		case track.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case track.FieldPopularity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field popularity", values[i])
			} else if value.Valid {
				t.Popularity = int(value.Int64)
			}
		case track.FieldPreviewURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field preview_url", values[i])
			} else if value.Valid {
				t.PreviewURL = value.String
			}
		case track.FieldTrackNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field track_number", values[i])
			} else if value.Valid {
				t.TrackNumber = int(value.Int64)
			}
		case track.FieldURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uri", values[i])
			} else if value.Valid {
				t.URI = value.String
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Track.
// This includes values selected through modifiers, order, etc.
func (t *Track) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryArtists queries the "artists" edge of the Track entity.
func (t *Track) QueryArtists() *ArtistQuery {
	return NewTrackClient(t.config).QueryArtists(t)
}

// QueryAlbum queries the "album" edge of the Track entity.
func (t *Track) QueryAlbum() *AlbumQuery {
	return NewTrackClient(t.config).QueryAlbum(t)
}

// Update returns a builder for updating this Track.
// Note that you need to call Track.Unwrap() before calling this method if this Track
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Track) Update() *TrackUpdateOne {
	return NewTrackClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Track entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Track) Unwrap() *Track {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Track is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Track) String() string {
	var builder strings.Builder
	builder.WriteString("Track(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("album_id=")
	builder.WriteString(t.AlbumID)
	builder.WriteString(", ")
	builder.WriteString("available_markets=")
	builder.WriteString(fmt.Sprintf("%v", t.AvailableMarkets))
	builder.WriteString(", ")
	builder.WriteString("disc_number=")
	builder.WriteString(fmt.Sprintf("%v", t.DiscNumber))
	builder.WriteString(", ")
	builder.WriteString("duration_ms=")
	builder.WriteString(fmt.Sprintf("%v", t.DurationMs))
	builder.WriteString(", ")
	builder.WriteString("explicit=")
	builder.WriteString(fmt.Sprintf("%v", t.Explicit))
	builder.WriteString(", ")
	builder.WriteString("external_urls=")
	builder.WriteString(fmt.Sprintf("%v", t.ExternalUrls))
	builder.WriteString(", ")
	builder.WriteString("href=")
	builder.WriteString(t.Href)
	builder.WriteString(", ")
	builder.WriteString("is_playable=")
	builder.WriteString(fmt.Sprintf("%v", t.IsPlayable))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("popularity=")
	builder.WriteString(fmt.Sprintf("%v", t.Popularity))
	builder.WriteString(", ")
	builder.WriteString("preview_url=")
	builder.WriteString(t.PreviewURL)
	builder.WriteString(", ")
	builder.WriteString("track_number=")
	builder.WriteString(fmt.Sprintf("%v", t.TrackNumber))
	builder.WriteString(", ")
	builder.WriteString("uri=")
	builder.WriteString(t.URI)
	builder.WriteByte(')')
	return builder.String()
}

// NamedArtists returns the Artists named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Track) NamedArtists(name string) ([]*Artist, error) {
	if t.Edges.namedArtists == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedArtists[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Track) appendNamedArtists(name string, edges ...*Artist) {
	if t.Edges.namedArtists == nil {
		t.Edges.namedArtists = make(map[string][]*Artist)
	}
	if len(edges) == 0 {
		t.Edges.namedArtists[name] = []*Artist{}
	} else {
		t.Edges.namedArtists[name] = append(t.Edges.namedArtists[name], edges...)
	}
}

// Tracks is a parsable slice of Track.
type Tracks []*Track
