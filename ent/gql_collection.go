// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rustic-beans/spotify-viewer/ent/album"
	"github.com/rustic-beans/spotify-viewer/ent/image"
	"github.com/rustic-beans/spotify-viewer/ent/track"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (a *AlbumQuery) CollectFields(ctx context.Context, satisfies ...string) (*AlbumQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return a, nil
	}
	if err := a.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return a, nil
}

func (a *AlbumQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(album.Columns))
		selectedFields = []string{album.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "images":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ImageClient{config: a.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, imageImplementors)...); err != nil {
				return err
			}
			a.WithNamedImages(alias, func(wq *ImageQuery) {
				*wq = *query
			})

		case "tracks":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TrackClient{config: a.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, trackImplementors)...); err != nil {
				return err
			}
			a.WithNamedTracks(alias, func(wq *TrackQuery) {
				*wq = *query
			})
		case "albumType":
			if _, ok := fieldSeen[album.FieldAlbumType]; !ok {
				selectedFields = append(selectedFields, album.FieldAlbumType)
				fieldSeen[album.FieldAlbumType] = struct{}{}
			}
		case "totalTracks":
			if _, ok := fieldSeen[album.FieldTotalTracks]; !ok {
				selectedFields = append(selectedFields, album.FieldTotalTracks)
				fieldSeen[album.FieldTotalTracks] = struct{}{}
			}
		case "href":
			if _, ok := fieldSeen[album.FieldHref]; !ok {
				selectedFields = append(selectedFields, album.FieldHref)
				fieldSeen[album.FieldHref] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[album.FieldName]; !ok {
				selectedFields = append(selectedFields, album.FieldName)
				fieldSeen[album.FieldName] = struct{}{}
			}
		case "releaseDate":
			if _, ok := fieldSeen[album.FieldReleaseDate]; !ok {
				selectedFields = append(selectedFields, album.FieldReleaseDate)
				fieldSeen[album.FieldReleaseDate] = struct{}{}
			}
		case "releaseDatePrecision":
			if _, ok := fieldSeen[album.FieldReleaseDatePrecision]; !ok {
				selectedFields = append(selectedFields, album.FieldReleaseDatePrecision)
				fieldSeen[album.FieldReleaseDatePrecision] = struct{}{}
			}
		case "restrictions":
			if _, ok := fieldSeen[album.FieldRestrictions]; !ok {
				selectedFields = append(selectedFields, album.FieldRestrictions)
				fieldSeen[album.FieldRestrictions] = struct{}{}
			}
		case "uri":
			if _, ok := fieldSeen[album.FieldURI]; !ok {
				selectedFields = append(selectedFields, album.FieldURI)
				fieldSeen[album.FieldURI] = struct{}{}
			}
		case "externalIds":
			if _, ok := fieldSeen[album.FieldExternalIds]; !ok {
				selectedFields = append(selectedFields, album.FieldExternalIds)
				fieldSeen[album.FieldExternalIds] = struct{}{}
			}
		case "label":
			if _, ok := fieldSeen[album.FieldLabel]; !ok {
				selectedFields = append(selectedFields, album.FieldLabel)
				fieldSeen[album.FieldLabel] = struct{}{}
			}
		case "popularity":
			if _, ok := fieldSeen[album.FieldPopularity]; !ok {
				selectedFields = append(selectedFields, album.FieldPopularity)
				fieldSeen[album.FieldPopularity] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		a.Select(selectedFields...)
	}
	return nil
}

type albumPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AlbumPaginateOption
}

func newAlbumPaginateArgs(rv map[string]any) *albumPaginateArgs {
	args := &albumPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (i *ImageQuery) CollectFields(ctx context.Context, satisfies ...string) (*ImageQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return i, nil
	}
	if err := i.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return i, nil
}

func (i *ImageQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(image.Columns))
		selectedFields = []string{image.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "albums":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AlbumClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, albumImplementors)...); err != nil {
				return err
			}
			i.WithNamedAlbums(alias, func(wq *AlbumQuery) {
				*wq = *query
			})
		case "url":
			if _, ok := fieldSeen[image.FieldURL]; !ok {
				selectedFields = append(selectedFields, image.FieldURL)
				fieldSeen[image.FieldURL] = struct{}{}
			}
		case "width":
			if _, ok := fieldSeen[image.FieldWidth]; !ok {
				selectedFields = append(selectedFields, image.FieldWidth)
				fieldSeen[image.FieldWidth] = struct{}{}
			}
		case "height":
			if _, ok := fieldSeen[image.FieldHeight]; !ok {
				selectedFields = append(selectedFields, image.FieldHeight)
				fieldSeen[image.FieldHeight] = struct{}{}
			}
		case "text":
			if _, ok := fieldSeen[image.FieldText]; !ok {
				selectedFields = append(selectedFields, image.FieldText)
				fieldSeen[image.FieldText] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		i.Select(selectedFields...)
	}
	return nil
}

type imagePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ImagePaginateOption
}

func newImagePaginateArgs(rv map[string]any) *imagePaginateArgs {
	args := &imagePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TrackQuery) CollectFields(ctx context.Context, satisfies ...string) (*TrackQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return t, nil
	}
	if err := t.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return t, nil
}

func (t *TrackQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(track.Columns))
		selectedFields = []string{track.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "albums":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AlbumClient{config: t.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, albumImplementors)...); err != nil {
				return err
			}
			t.withAlbums = query
		case "createdAt":
			if _, ok := fieldSeen[track.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, track.FieldCreatedAt)
				fieldSeen[track.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[track.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, track.FieldUpdatedAt)
				fieldSeen[track.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[track.FieldName]; !ok {
				selectedFields = append(selectedFields, track.FieldName)
				fieldSeen[track.FieldName] = struct{}{}
			}
		case "artists":
			if _, ok := fieldSeen[track.FieldArtists]; !ok {
				selectedFields = append(selectedFields, track.FieldArtists)
				fieldSeen[track.FieldArtists] = struct{}{}
			}
		case "artistsGenres":
			if _, ok := fieldSeen[track.FieldArtistsGenres]; !ok {
				selectedFields = append(selectedFields, track.FieldArtistsGenres)
				fieldSeen[track.FieldArtistsGenres] = struct{}{}
			}
		case "albumName":
			if _, ok := fieldSeen[track.FieldAlbumName]; !ok {
				selectedFields = append(selectedFields, track.FieldAlbumName)
				fieldSeen[track.FieldAlbumName] = struct{}{}
			}
		case "albumImageURI":
			if _, ok := fieldSeen[track.FieldAlbumImageURI]; !ok {
				selectedFields = append(selectedFields, track.FieldAlbumImageURI)
				fieldSeen[track.FieldAlbumImageURI] = struct{}{}
			}
		case "durationMs":
			if _, ok := fieldSeen[track.FieldDurationMs]; !ok {
				selectedFields = append(selectedFields, track.FieldDurationMs)
				fieldSeen[track.FieldDurationMs] = struct{}{}
			}
		case "uri":
			if _, ok := fieldSeen[track.FieldURI]; !ok {
				selectedFields = append(selectedFields, track.FieldURI)
				fieldSeen[track.FieldURI] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		t.Select(selectedFields...)
	}
	return nil
}

type trackPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []TrackPaginateOption
}

func newTrackPaginateArgs(rv map[string]any) *trackPaginateArgs {
	args := &trackPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
