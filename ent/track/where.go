// Code generated by ent, DO NOT EDIT.

package track

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rustic-beans/spotify-viewer/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Track {
	return predicate.Track(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Track {
	return predicate.Track(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Track {
	return predicate.Track(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Track {
	return predicate.Track(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Track {
	return predicate.Track(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Track {
	return predicate.Track(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Track {
	return predicate.Track(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Track {
	return predicate.Track(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldUpdatedAt, v))
}

// AlbumID applies equality check predicate on the "album_id" field. It's identical to AlbumIDEQ.
func AlbumID(v string) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldAlbumID, v))
}

// DiscNumber applies equality check predicate on the "disc_number" field. It's identical to DiscNumberEQ.
func DiscNumber(v int) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldDiscNumber, v))
}

// DurationMs applies equality check predicate on the "duration_ms" field. It's identical to DurationMsEQ.
func DurationMs(v int) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldDurationMs, v))
}

// Explicit applies equality check predicate on the "explicit" field. It's identical to ExplicitEQ.
func Explicit(v bool) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldExplicit, v))
}

// Href applies equality check predicate on the "href" field. It's identical to HrefEQ.
func Href(v string) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldHref, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldName, v))
}

// Popularity applies equality check predicate on the "popularity" field. It's identical to PopularityEQ.
func Popularity(v int) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldPopularity, v))
}

// PreviewURL applies equality check predicate on the "preview_url" field. It's identical to PreviewURLEQ.
func PreviewURL(v string) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldPreviewURL, v))
}

// TrackNumber applies equality check predicate on the "track_number" field. It's identical to TrackNumberEQ.
func TrackNumber(v int) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldTrackNumber, v))
}

// URI applies equality check predicate on the "uri" field. It's identical to URIEQ.
func URI(v string) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldURI, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Track {
	return predicate.Track(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Track {
	return predicate.Track(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Track {
	return predicate.Track(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Track {
	return predicate.Track(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldLTE(FieldUpdatedAt, v))
}

// AlbumIDEQ applies the EQ predicate on the "album_id" field.
func AlbumIDEQ(v string) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldAlbumID, v))
}

// AlbumIDNEQ applies the NEQ predicate on the "album_id" field.
func AlbumIDNEQ(v string) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldAlbumID, v))
}

// AlbumIDIn applies the In predicate on the "album_id" field.
func AlbumIDIn(vs ...string) predicate.Track {
	return predicate.Track(sql.FieldIn(FieldAlbumID, vs...))
}

// AlbumIDNotIn applies the NotIn predicate on the "album_id" field.
func AlbumIDNotIn(vs ...string) predicate.Track {
	return predicate.Track(sql.FieldNotIn(FieldAlbumID, vs...))
}

// AlbumIDGT applies the GT predicate on the "album_id" field.
func AlbumIDGT(v string) predicate.Track {
	return predicate.Track(sql.FieldGT(FieldAlbumID, v))
}

// AlbumIDGTE applies the GTE predicate on the "album_id" field.
func AlbumIDGTE(v string) predicate.Track {
	return predicate.Track(sql.FieldGTE(FieldAlbumID, v))
}

// AlbumIDLT applies the LT predicate on the "album_id" field.
func AlbumIDLT(v string) predicate.Track {
	return predicate.Track(sql.FieldLT(FieldAlbumID, v))
}

// AlbumIDLTE applies the LTE predicate on the "album_id" field.
func AlbumIDLTE(v string) predicate.Track {
	return predicate.Track(sql.FieldLTE(FieldAlbumID, v))
}

// AlbumIDContains applies the Contains predicate on the "album_id" field.
func AlbumIDContains(v string) predicate.Track {
	return predicate.Track(sql.FieldContains(FieldAlbumID, v))
}

// AlbumIDHasPrefix applies the HasPrefix predicate on the "album_id" field.
func AlbumIDHasPrefix(v string) predicate.Track {
	return predicate.Track(sql.FieldHasPrefix(FieldAlbumID, v))
}

// AlbumIDHasSuffix applies the HasSuffix predicate on the "album_id" field.
func AlbumIDHasSuffix(v string) predicate.Track {
	return predicate.Track(sql.FieldHasSuffix(FieldAlbumID, v))
}

// AlbumIDEqualFold applies the EqualFold predicate on the "album_id" field.
func AlbumIDEqualFold(v string) predicate.Track {
	return predicate.Track(sql.FieldEqualFold(FieldAlbumID, v))
}

// AlbumIDContainsFold applies the ContainsFold predicate on the "album_id" field.
func AlbumIDContainsFold(v string) predicate.Track {
	return predicate.Track(sql.FieldContainsFold(FieldAlbumID, v))
}

// DiscNumberEQ applies the EQ predicate on the "disc_number" field.
func DiscNumberEQ(v int) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldDiscNumber, v))
}

// DiscNumberNEQ applies the NEQ predicate on the "disc_number" field.
func DiscNumberNEQ(v int) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldDiscNumber, v))
}

// DiscNumberIn applies the In predicate on the "disc_number" field.
func DiscNumberIn(vs ...int) predicate.Track {
	return predicate.Track(sql.FieldIn(FieldDiscNumber, vs...))
}

// DiscNumberNotIn applies the NotIn predicate on the "disc_number" field.
func DiscNumberNotIn(vs ...int) predicate.Track {
	return predicate.Track(sql.FieldNotIn(FieldDiscNumber, vs...))
}

// DiscNumberGT applies the GT predicate on the "disc_number" field.
func DiscNumberGT(v int) predicate.Track {
	return predicate.Track(sql.FieldGT(FieldDiscNumber, v))
}

// DiscNumberGTE applies the GTE predicate on the "disc_number" field.
func DiscNumberGTE(v int) predicate.Track {
	return predicate.Track(sql.FieldGTE(FieldDiscNumber, v))
}

// DiscNumberLT applies the LT predicate on the "disc_number" field.
func DiscNumberLT(v int) predicate.Track {
	return predicate.Track(sql.FieldLT(FieldDiscNumber, v))
}

// DiscNumberLTE applies the LTE predicate on the "disc_number" field.
func DiscNumberLTE(v int) predicate.Track {
	return predicate.Track(sql.FieldLTE(FieldDiscNumber, v))
}

// DiscNumberIsNil applies the IsNil predicate on the "disc_number" field.
func DiscNumberIsNil() predicate.Track {
	return predicate.Track(sql.FieldIsNull(FieldDiscNumber))
}

// DiscNumberNotNil applies the NotNil predicate on the "disc_number" field.
func DiscNumberNotNil() predicate.Track {
	return predicate.Track(sql.FieldNotNull(FieldDiscNumber))
}

// DurationMsEQ applies the EQ predicate on the "duration_ms" field.
func DurationMsEQ(v int) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldDurationMs, v))
}

// DurationMsNEQ applies the NEQ predicate on the "duration_ms" field.
func DurationMsNEQ(v int) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldDurationMs, v))
}

// DurationMsIn applies the In predicate on the "duration_ms" field.
func DurationMsIn(vs ...int) predicate.Track {
	return predicate.Track(sql.FieldIn(FieldDurationMs, vs...))
}

// DurationMsNotIn applies the NotIn predicate on the "duration_ms" field.
func DurationMsNotIn(vs ...int) predicate.Track {
	return predicate.Track(sql.FieldNotIn(FieldDurationMs, vs...))
}

// DurationMsGT applies the GT predicate on the "duration_ms" field.
func DurationMsGT(v int) predicate.Track {
	return predicate.Track(sql.FieldGT(FieldDurationMs, v))
}

// DurationMsGTE applies the GTE predicate on the "duration_ms" field.
func DurationMsGTE(v int) predicate.Track {
	return predicate.Track(sql.FieldGTE(FieldDurationMs, v))
}

// DurationMsLT applies the LT predicate on the "duration_ms" field.
func DurationMsLT(v int) predicate.Track {
	return predicate.Track(sql.FieldLT(FieldDurationMs, v))
}

// DurationMsLTE applies the LTE predicate on the "duration_ms" field.
func DurationMsLTE(v int) predicate.Track {
	return predicate.Track(sql.FieldLTE(FieldDurationMs, v))
}

// ExplicitEQ applies the EQ predicate on the "explicit" field.
func ExplicitEQ(v bool) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldExplicit, v))
}

// ExplicitNEQ applies the NEQ predicate on the "explicit" field.
func ExplicitNEQ(v bool) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldExplicit, v))
}

// HrefEQ applies the EQ predicate on the "href" field.
func HrefEQ(v string) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldHref, v))
}

// HrefNEQ applies the NEQ predicate on the "href" field.
func HrefNEQ(v string) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldHref, v))
}

// HrefIn applies the In predicate on the "href" field.
func HrefIn(vs ...string) predicate.Track {
	return predicate.Track(sql.FieldIn(FieldHref, vs...))
}

// HrefNotIn applies the NotIn predicate on the "href" field.
func HrefNotIn(vs ...string) predicate.Track {
	return predicate.Track(sql.FieldNotIn(FieldHref, vs...))
}

// HrefGT applies the GT predicate on the "href" field.
func HrefGT(v string) predicate.Track {
	return predicate.Track(sql.FieldGT(FieldHref, v))
}

// HrefGTE applies the GTE predicate on the "href" field.
func HrefGTE(v string) predicate.Track {
	return predicate.Track(sql.FieldGTE(FieldHref, v))
}

// HrefLT applies the LT predicate on the "href" field.
func HrefLT(v string) predicate.Track {
	return predicate.Track(sql.FieldLT(FieldHref, v))
}

// HrefLTE applies the LTE predicate on the "href" field.
func HrefLTE(v string) predicate.Track {
	return predicate.Track(sql.FieldLTE(FieldHref, v))
}

// HrefContains applies the Contains predicate on the "href" field.
func HrefContains(v string) predicate.Track {
	return predicate.Track(sql.FieldContains(FieldHref, v))
}

// HrefHasPrefix applies the HasPrefix predicate on the "href" field.
func HrefHasPrefix(v string) predicate.Track {
	return predicate.Track(sql.FieldHasPrefix(FieldHref, v))
}

// HrefHasSuffix applies the HasSuffix predicate on the "href" field.
func HrefHasSuffix(v string) predicate.Track {
	return predicate.Track(sql.FieldHasSuffix(FieldHref, v))
}

// HrefEqualFold applies the EqualFold predicate on the "href" field.
func HrefEqualFold(v string) predicate.Track {
	return predicate.Track(sql.FieldEqualFold(FieldHref, v))
}

// HrefContainsFold applies the ContainsFold predicate on the "href" field.
func HrefContainsFold(v string) predicate.Track {
	return predicate.Track(sql.FieldContainsFold(FieldHref, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Track {
	return predicate.Track(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Track {
	return predicate.Track(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Track {
	return predicate.Track(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Track {
	return predicate.Track(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Track {
	return predicate.Track(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Track {
	return predicate.Track(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Track {
	return predicate.Track(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Track {
	return predicate.Track(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Track {
	return predicate.Track(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Track {
	return predicate.Track(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Track {
	return predicate.Track(sql.FieldContainsFold(FieldName, v))
}

// PopularityEQ applies the EQ predicate on the "popularity" field.
func PopularityEQ(v int) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldPopularity, v))
}

// PopularityNEQ applies the NEQ predicate on the "popularity" field.
func PopularityNEQ(v int) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldPopularity, v))
}

// PopularityIn applies the In predicate on the "popularity" field.
func PopularityIn(vs ...int) predicate.Track {
	return predicate.Track(sql.FieldIn(FieldPopularity, vs...))
}

// PopularityNotIn applies the NotIn predicate on the "popularity" field.
func PopularityNotIn(vs ...int) predicate.Track {
	return predicate.Track(sql.FieldNotIn(FieldPopularity, vs...))
}

// PopularityGT applies the GT predicate on the "popularity" field.
func PopularityGT(v int) predicate.Track {
	return predicate.Track(sql.FieldGT(FieldPopularity, v))
}

// PopularityGTE applies the GTE predicate on the "popularity" field.
func PopularityGTE(v int) predicate.Track {
	return predicate.Track(sql.FieldGTE(FieldPopularity, v))
}

// PopularityLT applies the LT predicate on the "popularity" field.
func PopularityLT(v int) predicate.Track {
	return predicate.Track(sql.FieldLT(FieldPopularity, v))
}

// PopularityLTE applies the LTE predicate on the "popularity" field.
func PopularityLTE(v int) predicate.Track {
	return predicate.Track(sql.FieldLTE(FieldPopularity, v))
}

// PreviewURLEQ applies the EQ predicate on the "preview_url" field.
func PreviewURLEQ(v string) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldPreviewURL, v))
}

// PreviewURLNEQ applies the NEQ predicate on the "preview_url" field.
func PreviewURLNEQ(v string) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldPreviewURL, v))
}

// PreviewURLIn applies the In predicate on the "preview_url" field.
func PreviewURLIn(vs ...string) predicate.Track {
	return predicate.Track(sql.FieldIn(FieldPreviewURL, vs...))
}

// PreviewURLNotIn applies the NotIn predicate on the "preview_url" field.
func PreviewURLNotIn(vs ...string) predicate.Track {
	return predicate.Track(sql.FieldNotIn(FieldPreviewURL, vs...))
}

// PreviewURLGT applies the GT predicate on the "preview_url" field.
func PreviewURLGT(v string) predicate.Track {
	return predicate.Track(sql.FieldGT(FieldPreviewURL, v))
}

// PreviewURLGTE applies the GTE predicate on the "preview_url" field.
func PreviewURLGTE(v string) predicate.Track {
	return predicate.Track(sql.FieldGTE(FieldPreviewURL, v))
}

// PreviewURLLT applies the LT predicate on the "preview_url" field.
func PreviewURLLT(v string) predicate.Track {
	return predicate.Track(sql.FieldLT(FieldPreviewURL, v))
}

// PreviewURLLTE applies the LTE predicate on the "preview_url" field.
func PreviewURLLTE(v string) predicate.Track {
	return predicate.Track(sql.FieldLTE(FieldPreviewURL, v))
}

// PreviewURLContains applies the Contains predicate on the "preview_url" field.
func PreviewURLContains(v string) predicate.Track {
	return predicate.Track(sql.FieldContains(FieldPreviewURL, v))
}

// PreviewURLHasPrefix applies the HasPrefix predicate on the "preview_url" field.
func PreviewURLHasPrefix(v string) predicate.Track {
	return predicate.Track(sql.FieldHasPrefix(FieldPreviewURL, v))
}

// PreviewURLHasSuffix applies the HasSuffix predicate on the "preview_url" field.
func PreviewURLHasSuffix(v string) predicate.Track {
	return predicate.Track(sql.FieldHasSuffix(FieldPreviewURL, v))
}

// PreviewURLIsNil applies the IsNil predicate on the "preview_url" field.
func PreviewURLIsNil() predicate.Track {
	return predicate.Track(sql.FieldIsNull(FieldPreviewURL))
}

// PreviewURLNotNil applies the NotNil predicate on the "preview_url" field.
func PreviewURLNotNil() predicate.Track {
	return predicate.Track(sql.FieldNotNull(FieldPreviewURL))
}

// PreviewURLEqualFold applies the EqualFold predicate on the "preview_url" field.
func PreviewURLEqualFold(v string) predicate.Track {
	return predicate.Track(sql.FieldEqualFold(FieldPreviewURL, v))
}

// PreviewURLContainsFold applies the ContainsFold predicate on the "preview_url" field.
func PreviewURLContainsFold(v string) predicate.Track {
	return predicate.Track(sql.FieldContainsFold(FieldPreviewURL, v))
}

// TrackNumberEQ applies the EQ predicate on the "track_number" field.
func TrackNumberEQ(v int) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldTrackNumber, v))
}

// TrackNumberNEQ applies the NEQ predicate on the "track_number" field.
func TrackNumberNEQ(v int) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldTrackNumber, v))
}

// TrackNumberIn applies the In predicate on the "track_number" field.
func TrackNumberIn(vs ...int) predicate.Track {
	return predicate.Track(sql.FieldIn(FieldTrackNumber, vs...))
}

// TrackNumberNotIn applies the NotIn predicate on the "track_number" field.
func TrackNumberNotIn(vs ...int) predicate.Track {
	return predicate.Track(sql.FieldNotIn(FieldTrackNumber, vs...))
}

// TrackNumberGT applies the GT predicate on the "track_number" field.
func TrackNumberGT(v int) predicate.Track {
	return predicate.Track(sql.FieldGT(FieldTrackNumber, v))
}

// TrackNumberGTE applies the GTE predicate on the "track_number" field.
func TrackNumberGTE(v int) predicate.Track {
	return predicate.Track(sql.FieldGTE(FieldTrackNumber, v))
}

// TrackNumberLT applies the LT predicate on the "track_number" field.
func TrackNumberLT(v int) predicate.Track {
	return predicate.Track(sql.FieldLT(FieldTrackNumber, v))
}

// TrackNumberLTE applies the LTE predicate on the "track_number" field.
func TrackNumberLTE(v int) predicate.Track {
	return predicate.Track(sql.FieldLTE(FieldTrackNumber, v))
}

// URIEQ applies the EQ predicate on the "uri" field.
func URIEQ(v string) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldURI, v))
}

// URINEQ applies the NEQ predicate on the "uri" field.
func URINEQ(v string) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldURI, v))
}

// URIIn applies the In predicate on the "uri" field.
func URIIn(vs ...string) predicate.Track {
	return predicate.Track(sql.FieldIn(FieldURI, vs...))
}

// URINotIn applies the NotIn predicate on the "uri" field.
func URINotIn(vs ...string) predicate.Track {
	return predicate.Track(sql.FieldNotIn(FieldURI, vs...))
}

// URIGT applies the GT predicate on the "uri" field.
func URIGT(v string) predicate.Track {
	return predicate.Track(sql.FieldGT(FieldURI, v))
}

// URIGTE applies the GTE predicate on the "uri" field.
func URIGTE(v string) predicate.Track {
	return predicate.Track(sql.FieldGTE(FieldURI, v))
}

// URILT applies the LT predicate on the "uri" field.
func URILT(v string) predicate.Track {
	return predicate.Track(sql.FieldLT(FieldURI, v))
}

// URILTE applies the LTE predicate on the "uri" field.
func URILTE(v string) predicate.Track {
	return predicate.Track(sql.FieldLTE(FieldURI, v))
}

// URIContains applies the Contains predicate on the "uri" field.
func URIContains(v string) predicate.Track {
	return predicate.Track(sql.FieldContains(FieldURI, v))
}

// URIHasPrefix applies the HasPrefix predicate on the "uri" field.
func URIHasPrefix(v string) predicate.Track {
	return predicate.Track(sql.FieldHasPrefix(FieldURI, v))
}

// URIHasSuffix applies the HasSuffix predicate on the "uri" field.
func URIHasSuffix(v string) predicate.Track {
	return predicate.Track(sql.FieldHasSuffix(FieldURI, v))
}

// URIEqualFold applies the EqualFold predicate on the "uri" field.
func URIEqualFold(v string) predicate.Track {
	return predicate.Track(sql.FieldEqualFold(FieldURI, v))
}

// URIContainsFold applies the ContainsFold predicate on the "uri" field.
func URIContainsFold(v string) predicate.Track {
	return predicate.Track(sql.FieldContainsFold(FieldURI, v))
}

// HasArtists applies the HasEdge predicate on the "artists" edge.
func HasArtists() predicate.Track {
	return predicate.Track(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ArtistsTable, ArtistsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArtistsWith applies the HasEdge predicate on the "artists" edge with a given conditions (other predicates).
func HasArtistsWith(preds ...predicate.Artist) predicate.Track {
	return predicate.Track(func(s *sql.Selector) {
		step := newArtistsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAlbum applies the HasEdge predicate on the "album" edge.
func HasAlbum() predicate.Track {
	return predicate.Track(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AlbumTable, AlbumColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAlbumWith applies the HasEdge predicate on the "album" edge with a given conditions (other predicates).
func HasAlbumWith(preds ...predicate.Album) predicate.Track {
	return predicate.Track(func(s *sql.Selector) {
		step := newAlbumStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Track) predicate.Track {
	return predicate.Track(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Track) predicate.Track {
	return predicate.Track(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Track) predicate.Track {
	return predicate.Track(sql.NotPredicates(p))
}
