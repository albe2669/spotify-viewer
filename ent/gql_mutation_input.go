// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/rustic-beans/spotify-viewer/ent/album"
	"github.com/rustic-beans/spotify-viewer/ent/schema"
)

// CreateAlbumInput represents a mutation input for creating albums.
type CreateAlbumInput struct {
	AlbumType            album.AlbumType
	TotalTracks          int
	AvailableMarkets     []string
	ExternalUrls         *schema.StringMap
	Href                 string
	Name                 string
	ReleaseDate          string
	ReleaseDatePrecision album.ReleaseDatePrecision
	Restrictions         *string
	URI                  string
	Genres               []string
	Label                string
	Popularity           int
	ImageIDs             []string
	ArtistIDs            []string
	TrackIDs             []string
}

// Mutate applies the CreateAlbumInput on the AlbumMutation builder.
func (i *CreateAlbumInput) Mutate(m *AlbumMutation) {
	m.SetAlbumType(i.AlbumType)
	m.SetTotalTracks(i.TotalTracks)
	if v := i.AvailableMarkets; v != nil {
		m.SetAvailableMarkets(v)
	}
	if v := i.ExternalUrls; v != nil {
		m.SetExternalUrls(v)
	}
	m.SetHref(i.Href)
	m.SetName(i.Name)
	m.SetReleaseDate(i.ReleaseDate)
	m.SetReleaseDatePrecision(i.ReleaseDatePrecision)
	if v := i.Restrictions; v != nil {
		m.SetRestrictions(*v)
	}
	m.SetURI(i.URI)
	if v := i.Genres; v != nil {
		m.SetGenres(v)
	}
	m.SetLabel(i.Label)
	m.SetPopularity(i.Popularity)
	if v := i.ImageIDs; len(v) > 0 {
		m.AddImageIDs(v...)
	}
	if v := i.ArtistIDs; len(v) > 0 {
		m.AddArtistIDs(v...)
	}
	if v := i.TrackIDs; len(v) > 0 {
		m.AddTrackIDs(v...)
	}
}

// SetInput applies the change-set in the CreateAlbumInput on the AlbumCreate builder.
func (c *AlbumCreate) SetInput(i CreateAlbumInput) *AlbumCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateImageInput represents a mutation input for creating images.
type CreateImageInput struct {
	URL      string
	Width    int
	Height   int
	Text     string
	AlbumIDs []string
}

// Mutate applies the CreateImageInput on the ImageMutation builder.
func (i *CreateImageInput) Mutate(m *ImageMutation) {
	m.SetURL(i.URL)
	m.SetWidth(i.Width)
	m.SetHeight(i.Height)
	m.SetText(i.Text)
	if v := i.AlbumIDs; len(v) > 0 {
		m.AddAlbumIDs(v...)
	}
}

// SetInput applies the change-set in the CreateImageInput on the ImageCreate builder.
func (c *ImageCreate) SetInput(i CreateImageInput) *ImageCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateTrackInput represents a mutation input for creating tracks.
type CreateTrackInput struct {
	CreatedAt        *time.Time
	UpdatedAt        *time.Time
	AvailableMarkets []string
	DiscNumber       *int
	DurationMs       int
	Explicit         *bool
	ExternalUrls     *schema.StringMap
	Href             string
	IsPlayable       bool
	Name             string
	Popularity       int
	PreviewURL       *string
	TrackNumber      int
	URI              string
	ArtistIDs        []string
	AlbumID          string
}

// Mutate applies the CreateTrackInput on the TrackMutation builder.
func (i *CreateTrackInput) Mutate(m *TrackMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.AvailableMarkets; v != nil {
		m.SetAvailableMarkets(v)
	}
	if v := i.DiscNumber; v != nil {
		m.SetDiscNumber(*v)
	}
	m.SetDurationMs(i.DurationMs)
	if v := i.Explicit; v != nil {
		m.SetExplicit(*v)
	}
	if v := i.ExternalUrls; v != nil {
		m.SetExternalUrls(v)
	}
	m.SetHref(i.Href)
	m.SetIsPlayable(i.IsPlayable)
	m.SetName(i.Name)
	m.SetPopularity(i.Popularity)
	if v := i.PreviewURL; v != nil {
		m.SetPreviewURL(*v)
	}
	m.SetTrackNumber(i.TrackNumber)
	m.SetURI(i.URI)
	if v := i.ArtistIDs; len(v) > 0 {
		m.AddArtistIDs(v...)
	}
	m.SetAlbumID(i.AlbumID)
}

// SetInput applies the change-set in the CreateTrackInput on the TrackCreate builder.
func (c *TrackCreate) SetInput(i CreateTrackInput) *TrackCreate {
	i.Mutate(c.Mutation())
	return c
}
