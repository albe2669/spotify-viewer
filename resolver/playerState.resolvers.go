package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"

	spotify "github.com/zmb3/spotify/v2"
)

// PlayerState is the resolver for the playerState field.
func (r *queryResolver) PlayerState(ctx context.Context) (*spotify.PlayerState, error) {
	return r.SpotifyClient.GetPlayerState(ctx)
}

// PlayerState is the resolver for the playerState field.
func (r *subscriptionResolver) PlayerState(ctx context.Context) (<-chan *spotify.PlayerState, error) {
	ch := make(chan *spotify.PlayerState, 1)
	id := r.PlayerStateWebsocketHandler.AddConnection(ch)

	go func() {
		<-ctx.Done()
		r.PlayerStateWebsocketHandler.RemoveConnection(id)
		close(ch)
	}()
	state, err := r.SpotifyClient.GetPlayerState(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get player state: %w", err)
	}

	ch <- state

	return ch, nil
}
